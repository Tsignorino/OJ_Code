{
	"solpy": {
		"prefix": "solpy",
		"body": [
			"from functools import cache",
			"from math import inf",
			"from typing import Any, Optional, List",
			"",
			"from more_itertools import minmax, sieve",
			"",
			"fmax = lambda x, y: x if x > y else y",
			"fmin = lambda x, y: x if x < y else y",
			"MOD = 1_000_000_007",
			"",
			""
		]
	},
	"py": {
		"prefix": "py",
		"body": [
			"import sys",
			"import typing",
			"from math import inf",
			"",
			"input = lambda: sys.stdin.readline().strip()",
			"fmax = lambda x, y: x if x > y else y",
			"fmin = lambda x, y: x if x < y else y",
			"",
			"I = lambda: input()",
			"II = lambda: int(input())",
			"LI = lambda: list(input())",
			"LII = lambda: list(map(int, input().split()))",
			"MII = lambda: map(int, input().split())",
			"LGMI = lambda: map(lambda x: int(x) - 1, input().split())",
			"",
			"MOD = 998244353",
			"",
			"",
			"def solve():",
			"    $1",
			"    pass",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    solve()",
			""
		]
	},
	"pys": {
		"prefix": "pys",
		"body": [
			"import sys",
			"import typing",
			"from math import inf",
			"",
			"input = lambda: sys.stdin.readline().strip()",
			"fmax = lambda x, y: x if x > y else y",
			"fmin = lambda x, y: x if x < y else y",
			"",
			"I = lambda: input()",
			"II = lambda: int(input())",
			"LI = lambda: list(input())",
			"LII = lambda: list(map(int, input().split()))",
			"MII = lambda: map(int, input().split())",
			"LGMI = lambda: map(lambda x: int(x) - 1, input().split())",
			"",
			"MOD = 998244353",
			"",
			"",
			"def solve():",
			"    $1",
			"    pass",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    for _ in range(II()):",
			"        solve()",
			""
		]
	},
	"timer": {
		"prefix": "timer",
		"body": [
			"import time, sys",
			"",
			"",
			"def timer(func):",
			"    def wrapper(*args, **kwargs):",
			"        start_time = time.time()",
			"        result = func(*args, **kwargs)",
			"        end_time = time.time()",
			"        sys.stderr.write(f\"{func.__name__}: {end_time - start_time}s\\n\")",
			"        return result",
			"",
			"    return wrapper",
			"",
		]
	}
}